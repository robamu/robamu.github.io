<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pip on hi, I am robin</title><link>https://robamu.github.io/tags/pip/</link><description>Recent content in Pip on hi, I am robin</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Tue, 03 Oct 2023 19:46:45 +0200</lastBuildDate><atom:link href="https://robamu.github.io/tags/pip/index.xml" rel="self" type="application/rss+xml"/><item><title>Packaging Python Projects in 2023</title><link>https://robamu.github.io/blog/packaging-python-in-2023/</link><pubDate>Mon, 04 Sep 2023 16:32:41 +0200</pubDate><guid>https://robamu.github.io/blog/packaging-python-in-2023/</guid><description>&lt;p>Learning clean package management with Pyhon is still a tricky subject even though there are a lot
of resources available online. A lot of the resources found online only cover partial topics while
others make recommendations which are becoming slowly obsolete, for example by still using
&lt;code>setup.py&lt;/code>. In this post, I will show how to set up a new package in Python from
scratch with all features I consider useful and important for a good Python package. I really like
the packaging blogpost &lt;a href="https://venthur.de/2022-12-18-python-packaging.html">Bastian Venthur&lt;/a> about
the current best practices of Python packaging, which is worth a read as well.&lt;/p></description></item></channel></rss>